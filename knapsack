#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  5 18:17:52 2021

@author: raviravindran
"""

import sys, random

class Food(object):
    def __init__(self, n,v,w):
        self.name=n
        self.value=v
        self.calories=w
    
    def getValue(self):
        return self.value
    
    def getCost(self):
        return self.calories
    
    def density(self):
        return self.getValue()/self.getCost()
    
    def __str__(self):
        return self.name + ':<' +str(self.value) +',' +str(self.calories)+'>'
    
def buildMenu(names, values, calories):
    """names, values, calories lists of the same length
      name a list of strings
      values an dclories list of numbers
      returns list of foods"""
    menu = []
    for i in range(len(values)):
        menu.append(Food(names[i],values[i],calories[i]))
    return menu
  
def greedy(items, maxCost, keyFunction):
    """Assume items a a list, maxCost >=0,
    keyFunction maps elements of items to numbers"""
    itemsCopy = sorted(items, key=keyFunction, reverse=True)
    result = []
    totalValue, totalCost =0.0, 0.0
    for i in range(len(itemsCopy)):
        if(totalCost + itemsCopy[i].getCost())<=maxCost:
            result.append(itemsCopy[i])
            totalCost += itemsCopy[i].getCost()
            totalValue += itemsCopy[i].getValue()
    return (result, totalValue)

def testGreedy(items, constraint, keyFunction):
    taken, val=greedy(items, constraint, keyFunction)
    print('Total value of items taken=', val)
    for item in taken:
        print(' ', item)


def testGreedys(food, maxUnits):
    print('Use greedy by value to allocate', maxUnits, 'Calorites')
    testGreedy(food, maxUnits, Food.getValue)
    print('\nUse greedy by cost to allocate', maxUnits, 'calories')
    testGreedy(food, maxUnits, lambda x: 1/Food.getCost(x))
    print('\nUse greedy by density to allocate', maxUnits, 'Calories')
    testGreedy(food, maxUnits, Food.density)
    
    

def maxVal(toConsider, avail):
    """Assumes toConsider a list of items, avail a weight, Returns a tuble of total
    value of a solution to 0/1 knapsak problem adn the items of that solution"""
    if toConsider==[] or avail==0:
        result =(0, ())
    elif toConsider[0].getCost() > avail:
        result=maxVal(toConsider[1:], avail)
    else:
        nextItem = toConsider[0]
        withVal, withToTake= maxVal(toConsider[1:], avail - nextItem.getCost())
        withVal += nextItem.getValue()
        withoutVal, withoutToTake = maxVal(toConsider[1:], avail)
        if withVal > withoutVal:
            result =(withVal, withToTake+ (nextItem,))
        else:
            result=(withoutVal, withoutToTake)
    return result


def fastMaxVal(toConsider, avail, memo={}):
    """Assumes toConsider a list of subjects, avail as weight
    memo supplied by recursive calls, Returns a tuble of the total value of a
    solution to the 0/1 knapsack problem and the subjects of that solution"""
    if(len(toConsider), avail) in memo:
        result = memo[(len(toConsider), avail)]
    
    elif toConsider==[] or avail ==0:
        result = (0, ())
    
    elif toConsider[0].getCost()>avail:
        result = fastMaxVal(toConsider[1:], avail, memo)
    else:
        nextItem=toConsider[0]
        withVal, withToTake=fastMaxVal(toConsider[1:], avail-nextItem.getCost()
                                       , memo)
        withVal +=nextItem.getValue()
        withoutVal, withoutToTake = fastMaxVal(toConsider[1:], avail, memo)
        
        if withVal > withoutVal:
            result = (withVal, withToTake + (nextItem,))
        
        else:
            result = (withoutVal, withoutToTake)
    memo[(len(toConsider), avail)] = result
    return result


def testMaxVal(foods, maxUnits, algorithm, printItems=True):
    print('Menu Contains : ', len(foods), ' items' )
    print('Use search tree to allocate', maxUnits, 'calories')
    val, taken=algorithm(foods, maxUnits)
    print('Total value of items taken= ', val)
    if printItems:
        for item in taken:
            print(' ', item)


def buildLargeMenu(numItems, maxVal, maxCost):
    items=[]
    for i in range(numItems):
        items.append(Food(str(i), 
                     random.randint(1, maxVal),
                     random.randint(1, maxCost)))
    return items

def fib(n):
    if n==0 or n==1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
    
def fastFib(n, memo={}):
    ''' Assumes n is an int>-0, memo used only by recursive calls, returns
    Fibonacci of n'''
    if n==0 or n==1:
        return 1
    try:
        return memo[n]
    except KeyError:
        result = fastFib(n-1, memo) + fastFib(n-2, memo)
        memo[n] = result
        return result
    

def main(argv):
   
   ''' 
   names =['wine', 'beer', 'pizza', 'burger', 'fries','cola', 'apple'
            ,'donut', 'cake']
    values = [89, 90, 95, 100, 90,79, 50, 10]
    calories =[123, 154, 258, 354, 365, 150, 95, 195]
    foods = buildMenu(names, values, calories)
    #testGreedys(foods, 750)
    print('')
    testMaxVal(foods, 750, maxVal, False)
   '''
    
   for numItems in (5,10,15,20,25,30,40,45):
       items = buildLargeMenu(numItems, 90,250)
       testMaxVal(items, 750, fastMaxVal, False)
       testMaxVal(items, 750, maxVal, False)
       print('')
    
   '''
    
    for i in range(121):
        print('fib( ' + str(i) + ')', fastFib(i))
    
    n=1000
    print("Value of fib ", n, "is : ", fastFib(n))
   '''


if __name__ == "__main__":
   main(sys.argv[1:])
    